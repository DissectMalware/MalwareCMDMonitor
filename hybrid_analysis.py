import urllib.request
import json
import datetime
import os


def get_HA_feed():
    url = "https://www.hybrid-analysis.com/feed?json"
    user_agent = 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_9_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/35.0.1916.47 Safari/537.36'
    req = urllib.request.Request(
        url,
        data=None,
        headers={
            'User-Agent': user_agent
        }
    )

    response = urllib.request.urlopen(req)
    content = response.read().decode('utf-8')
    return content


def save_feed(output_dir_path, content):
    dt_now = datetime.datetime.now().strftime('%b %d %Y - %H %M %S')
    filename = 'HA - {}.rlog'.format(dt_now)
    with open(os.path.join(output_dir_path, filename), 'w', encoding='utf-8') as rlog:
        rlog.write(content)


def extract_commands(content):
    obj = json.loads(content)

    commands = {}

    instance_template = "{}\t{}\t{}\t{}\t{}\t{}\t{}"
    for instance in obj['data']:
        report_url = instance["reporturl"]
        thread_score = instance["threatscore"]
        sha256 = instance["sha256"]
        analysis_time = instance["analysis_start_time"]
        file_type = instance["type"] if 'type' in instance else ""
        environment = instance["environmentDescription"]
        vt_detect = instance["vt_detect"] if 'vt_detect' in instance else ""
        instance_rec = instance_template.format("https://www.hybrid-analysis.com/"+report_url, sha256, analysis_time, environment, file_type, thread_score,
                                                vt_detect)

        for command in instance['process_list']:
            if 'normalizedpath' in command:
                if 'WINDIR' in command['normalizedpath'] or 'PROGRAMFILES' in command['normalizedpath']:
                    if command['normalizedpath'] not in commands:
                        commands[command['normalizedpath']] = {}

                    if command['commandline'] not in commands[command['normalizedpath']]:
                        commands[command['normalizedpath']][command['commandline']] = set()
                    commands[command['normalizedpath']][command['commandline']].add(instance_rec)

    return commands


if __name__ == "__main__":
    content = get_HA_feed()

    save_feed(".", content)

    commands = extract_commands(content)

    for command, commandlines in commands.items():
        print("########################################")
        print(command)
        for commandline in commandlines:
            print("\t"+ commandline)
            for instance in commandlines[commandline]:
                print("\t\t" + instance)




